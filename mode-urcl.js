ace.define("ace/mode/urcl_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module){/* This file was autogenerated from Assembly x86.tmLanguage (uuid: ) */
"use strict";
var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;
var urclHighlightRules = function () {
    this.$rules = {
        start: 
        [    
            {
                token: 'token comment',
                regex: /(\/\/).*/,
                caseInsensitive: true
            },
            {
                token: "token comment",
                regex:/(\/\*)/,
                caseInsensitive:true,
                push:[
                    {
                        token: "token comment",
                        regex:/(\*\/)/,
                        caseInsensitive:true,
                        next:"pop"
                    },
                    {defaultToken:"token comment"}
                ]
            },
            {
                token: 'token string',
                regex: /(").+(")/,
                caseInsensitive: true
            },{
                token: 'token string',
                regex: /(').+(')/,
                caseInsensitive: true
            },
            
            {
                token: 'token.number',
                regex: /-?\b[0-9]+/,
                caseInsensitive: true
            },
            {
                token: 'token.number',
                regex: /-?\b(h|0x)[0-9a-f]+/,
                caseInsensitive: true
            },
            {
                token: 'token.number',
                regex: /-?\b(b|0b)[01]+/,
                caseInsensitive: true
            },
            
            {
                token: 'token.register',
                regex: /(r|\$)[0-9]+/,
                caseInsensitive: true
            },
            {
                token: 'token.memory',
                regex: /(m|\#)[0-9]+/,
                caseInsensitive: true
            },
            {
                token: 'token.header',
                regex: /(BITS|MINREG|MINHEAP|RUN|MINSTACK)/,
                caseInsensitive: true
            },
            {
                token: 'token.special',
                regex: /(==|>=|<=|\[|\])/,
                caseInsensitive: true
            },
            {
                token: 'token.port',
                regex: /\%[^\s]+/,
                caseInsensitive: true
            },
            {
                token: 'token.constant',
                regex: /@[^\s]+/,
                caseInsensitive: true
            },
            {
                token: 'token.label',
                regex: /\.[^\s]+$/,
                caseInsensitive: true
            },
            
        ],
    };
    this.normalizeRules();
};
urclHighlightRules.metaData = { fileTypes: ['urcl'],
    name: 'urcl',
    scopeName: 'source.urcl' };
oop.inherits(urclHighlightRules, TextHighlightRules);
exports.urclHighlightRules = urclHighlightRules;

});

ace.define("ace/mode/folding/coffee",["require","exports","module","ace/lib/oop","ace/mode/folding/fold_mode","ace/range"], function(require, exports, module){"use strict";
var oop = require("../../lib/oop");
var BaseFoldMode = require("./fold_mode").FoldMode;
var Range = require("../../range").Range;
var FoldMode = exports.FoldMode = function () { };
oop.inherits(FoldMode, BaseFoldMode);
(function () {
    this.getFoldWidgetRange = function (session, foldStyle, row) {
        var range = this.indentationBlock(session, row);
        if (range)
            return range;
        var re = /\S/;
        var line = session.getLine(row);
        var startLevel = line.search(re);
        if (startLevel == -1 || line[startLevel] != "#")
            return;
        var startColumn = line.length;
        var maxRow = session.getLength();
        var startRow = row;
        var endRow = row;
        while (++row < maxRow) {
            line = session.getLine(row);
            var level = line.search(re);
            if (level == -1)
                continue;
            if (line[level] != "#")
                break;
            endRow = row;
        }
        if (endRow > startRow) {
            var endColumn = session.getLine(endRow).length;
            return new Range(startRow, startColumn, endRow, endColumn);
        }
    };
    this.getFoldWidget = function (session, foldStyle, row) {
        var line = session.getLine(row);
        var indent = line.search(/\S/);
        var next = session.getLine(row + 1);
        var prev = session.getLine(row - 1);
        var prevIndent = prev.search(/\S/);
        var nextIndent = next.search(/\S/);
        if (indent == -1) {
            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? "start" : "";
            return "";
        }
        if (prevIndent == -1) {
            if (indent == nextIndent && line[indent] == "#" && next[indent] == "#") {
                session.foldWidgets[row - 1] = "";
                session.foldWidgets[row + 1] = "";
                return "start";
            }
        }
        else if (prevIndent == indent && line[indent] == "#" && prev[indent] == "#") {
            if (session.getLine(row - 2).search(/\S/) == -1) {
                session.foldWidgets[row - 1] = "start";
                session.foldWidgets[row + 1] = "";
                return "";
            }
        }
        if (prevIndent != -1 && prevIndent < indent)
            session.foldWidgets[row - 1] = "start";
        else
            session.foldWidgets[row - 1] = "";
        if (indent < nextIndent)
            return "start";
        else
            return "";
    };
}).call(FoldMode.prototype);

});

ace.define("ace/mode/urcl",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/urcl_highlight_rules","ace/mode/folding/coffee"], function(require, exports, module){/*
  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js
*/
"use strict";
var oop = require("../lib/oop");
var TextMode = require("./text").Mode;
var urclHighlightRules = require("./urcl_highlight_rules").urclHighlightRules;
var FoldMode = require("./folding/coffee").FoldMode;
var Mode = function () {
    this.HighlightRules = urclHighlightRules;
    this.foldingRules = new FoldMode();
    this.$behaviour = this.$defaultBehaviour;
};
oop.inherits(Mode, TextMode);
(function () {
    this.lineCommentStart = [";"];
    this.$id = "ace/mode/urcl";
}).call(Mode.prototype);
exports.Mode = Mode;

});                (function() {
                    ace.require(["ace/mode/urcl"], function(m) {
                        if (typeof module == "object" && typeof exports == "object" && module) {
                            module.exports = m;
                        }
                    });
                })();
            